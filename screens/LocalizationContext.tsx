// screens/LocalizationContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { translations, Languages } from '../services/translations';

interface LocalizationContextType {
  language: Languages;
  setLanguage: (lang: Languages) => Promise<void>;
  t: (key: string) => string;
  availableLanguages: Array<{
    code: Languages;
    name: string;
    nativeName: string;
  }>;
}

const LocalizationContext = createContext<LocalizationContextType | undefined>(undefined);

export const useLocalization = () => {
  const context = useContext(LocalizationContext);
  if (!context) {
    throw new Error('useLocalization must be used within a LocalizationProvider');
  }
  return context;
};

interface LocalizationProviderProps {
  children: ReactNode;
}

export const LocalizationProvider: React.FC<LocalizationProviderProps> = ({ children }) => {
  const [language, setLanguageState] = useState<Languages>('ru');
  const [isInitialized, setIsInitialized] = useState(false);

  const availableLanguages = [
    { code: 'ru' as Languages, name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π' },
    { code: 'kk' as Languages, name: 'Kazakh', nativeName: '“ö–∞–∑–∞“õ—à–∞' },
    { code: 'en' as Languages, name: 'English', nativeName: 'English' },
  ];

  // –ï–¥–∏–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const LANGUAGE_KEY = 'app_language';

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  const loadLanguage = async () => {
    try {
      console.log('üåç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      const savedLanguage = await AsyncStorage.getItem(LANGUAGE_KEY);
      
      if (savedLanguage && ['ru', 'kk', 'en'].includes(savedLanguage)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫: ${savedLanguage}`);
        setLanguageState(savedLanguage as Languages);
      } else {
        console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru');
        setLanguageState('ru');
        await AsyncStorage.setItem(LANGUAGE_KEY, 'ru');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞:', error);
      setLanguageState('ru');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const setLanguage = async (lang: Languages) => {
    try {
      console.log(`üîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞: ${lang}`);
      setLanguageState(lang);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ AsyncStorage
      await AsyncStorage.setItem(LANGUAGE_KEY, lang);
      console.log(`üíæ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${lang}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const initialize = async () => {
      if (!isInitialized) {
        console.log('üåç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LocalizationProvider');
        await loadLanguage();
        setIsInitialized(true);
      }
    };

    initialize();
  }, [isInitialized]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const t = (key: string): string => {
    const keys = key.split('.');
    let translation: any = translations[language];
    
    for (const k of keys) {
      if (translation && typeof translation === 'object' && k in translation) {
        translation = translation[k];
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        console.warn(`Translation not found for key: ${key} in language: ${language}`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–∞–∫ fallback
        let englishTranslation: any = translations.en;
        for (const fallbackKey of keys) {
          if (englishTranslation && typeof englishTranslation === 'object' && fallbackKey in englishTranslation) {
            englishTranslation = englishTranslation[fallbackKey];
          } else {
            return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          }
        }
        return typeof englishTranslation === 'string' ? englishTranslation : key;
      }
    }
    
    return typeof translation === 'string' ? translation : key;
  };

  const value: LocalizationContextType = {
    language,
    setLanguage,
    t,
    availableLanguages,
  };

  return (
    <LocalizationContext.Provider value={value}>
      {children}
    </LocalizationContext.Provider>
  );
};