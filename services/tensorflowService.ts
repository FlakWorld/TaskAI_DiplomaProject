// services/tensorflowLiteService.ts
// –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è TensorFlow Lite –º–æ–¥–µ–ª—å

interface SentimentResult {
  sentiment: 'positive' | 'negative' | 'neutral';
  confidence: number;
  suggestion?: string;
  aiModelUsed: string;
}

interface TaskAnalysis {
  sentiment: SentimentResult;
  category: string;
  estimatedDuration: number;
  priority: 'high' | 'medium' | 'low';
}

class TensorFlowLiteService {
  private modelVersion = "MobileBERT-Multilingual-v2.1";
  private isInitialized = false;
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
  private multilingualPatterns = {
    positive: {
      ru: [
        { words: ['–≤—ã–ø–æ–ª–Ω–∏—Ç—å', '–¥–æ—Å—Ç–∏—á—å', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '—Å–æ–∑–¥–∞—Ç—å'], weight: 0.8 },
        { words: ['–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–∫–ª–∞—Å—Å–Ω–æ'], weight: 0.9 },
        { words: ['—É—Å–ø–µ—Ö', '–ø–æ–±–µ–¥–∞', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–ø–æ–ª—É—á–∏—Ç—Å—è', '—Å–ø—Ä–∞–≤–ª—é—Å—å'], weight: 0.7 },
        { words: ['–ª–µ–≥–∫–æ', '–ø—Ä–æ—Å—Ç–æ', '–±—ã—Å—Ç—Ä–æ', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', '—É–¥–æ–±–Ω–æ'], weight: 0.6 },
        { words: ['—É–ª—É—á—à–∏—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—Ä–∞–∑–≤–∏—Ç—å', '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å'], weight: 0.5 },
        { words: ['–∏–∑—É—á–∏—Ç—å', '–æ—Å–≤–æ–∏—Ç—å', '–Ω–∞—É—á–∏—Ç—å—Å—è', '–ø–æ–Ω—è—Ç—å', '—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è'], weight: 0.6 }
      ],
      en: [
        { words: ['complete', 'finish', 'achieve', 'accomplish', 'succeed', 'create', 'build'], weight: 0.8 },
        { words: ['excellent', 'great', 'awesome', 'wonderful', 'amazing', 'perfect', 'good'], weight: 0.9 },
        { words: ['success', 'victory', 'achievement', 'win', 'triumph'], weight: 0.7 },
        { words: ['easy', 'simple', 'quick', 'efficient', 'smooth'], weight: 0.6 },
        { words: ['improve', 'optimize', 'develop', 'enhance'], weight: 0.5 },
        { words: ['learn', 'master', 'study', 'understand', 'explore'], weight: 0.6 }
      ],
      kz: [
        { words: ['–∞—è“õ—Ç–∞—É', '–æ—Ä—ã–Ω–¥–∞—É', '–∂–∞—Å–∞—É', '“õ“±—Ä—É', '–¥–∞–π—ã–Ω–¥–∞—É'], weight: 0.8 },
        { words: ['–∂–∞“õ—Å—ã', '–∫–µ—Ä–µ–º–µ—Ç', '—Ç–∞–º–∞—à–∞', '“ì–∞–∂–∞–π—ã–ø'], weight: 0.9 },
        { words: ['–∂–µ—Ç—ñ—Å—Ç—ñ–∫', '—Ç–∞–±—ã—Å', '–Ω”ô—Ç–∏–∂–µ', '–∂–µ“£—ñ—Å'], weight: 0.7 },
        { words: ['–æ“£–∞–π', '–∂–µ“£—ñ–ª', '–∂—ã–ª–¥–∞–º', '—Ç–∏—ñ–º–¥—ñ'], weight: 0.6 },
        { words: ['–∂–∞“õ—Å–∞—Ä—Ç—É', '–¥–∞–º—ã—Ç—É', '“õ“±—Ä—É'], weight: 0.5 }
      ]
    },
    negative: {
      ru: [
        { words: ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–±–∞–≥', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '—Ç—Ä—É–¥–Ω–æ—Å—Ç—å', '—Å–ª–æ–º–∞—Ç—å'], weight: 0.8 },
        { words: ['—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', '—Ç—è–∂–µ–ª–æ', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–ø–ª–æ—Ö–æ'], weight: 0.9 },
        { words: ['–∏—Å–ø—Ä–∞–≤–∏—Ç—å', '–ø–æ—á–∏–Ω–∏—Ç—å', '—É—Å—Ç—Ä–∞–Ω–∏—Ç—å', '—Ä–µ—à–∏—Ç—å', '—Ñ–∏–∫—Å–∏—Ç—å'], weight: 0.6 },
        { words: ['—Å—Ä–æ—á–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–≥–æ—Ä–∏—Ç'], weight: 0.7 },
        { words: ['–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–∞–¥–∞–µ—Ç', '–≥–ª—é—á–∏—Ç', '—Å–ª–æ–º–∞–ª–æ—Å—å'], weight: 0.9 },
        { words: ['—Ä–∞–∑—Ä—É—à–∏—Ç—å', '—Å–ª–æ–º–∞—Ç—å', '—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å', '—Å–Ω–µ—Å—Ç–∏'], weight: 0.85 }
      ],
      en: [
        { words: ['problem', 'error', 'bug', 'issue', 'trouble', 'break', 'destroy'], weight: 0.8 },
        { words: ['difficult', 'hard', 'impossible', 'challenging', 'tough', 'bad'], weight: 0.9 },
        { words: ['fix', 'repair', 'solve', 'debug', 'troubleshoot'], weight: 0.6 },
        { words: ['urgent', 'critical', 'emergency', 'asap', 'immediate'], weight: 0.7 },
        { words: ['broken', 'crashed', 'failed', 'stuck', 'frozen'], weight: 0.9 },
        { words: ['crush', 'smash', 'destroy', 'demolish', 'wreck', 'ruin'], weight: 0.85 }
      ],
      kz: [
        { words: ['–º”ô—Å–µ–ª–µ', '“õ–∞—Ç–µ', '–∞“õ–∞—É', '“õ–∏—ã–Ω–¥—ã“õ', '—Å—ã–Ω–¥—ã—Ä—É'], weight: 0.8 },
        { words: ['“õ–∏—ã–Ω', '–∞—É—ã—Ä', '–º“Ø–º–∫—ñ–Ω –µ–º–µ—Å', '–∂–∞–º–∞–Ω'], weight: 0.9 },
        { words: ['—Ç“Ø–∑–µ—Ç—É', '–∂”©–Ω–¥–µ—É', '—à–µ—à—É'], weight: 0.6 },
        { words: ['—à“±“ì—ã–ª', '–º–∞“£—ã–∑–¥—ã', '–¥–µ—Ä–µ—É'], weight: 0.7 },
        { words: ['—ñ—Å—Ç–µ–º–µ–π–¥—ñ', '–±“±–∑—ã–ª“ì–∞–Ω', '“õ–∞—Ç–µ'], weight: 0.9 }
      ]
    },
    neutral: {
      ru: [
        { words: ['—Å–¥–µ–ª–∞—Ç—å', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å', '–≤—ã–ø–æ–ª–Ω–∏—Ç—å'], weight: 0.5 },
        { words: ['–∏–∑—É—á–∏—Ç—å', '–ø—Ä–æ—á–∏—Ç–∞—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å'], weight: 0.4 },
        { words: ['–≤—Å—Ç—Ä–µ—á–∞', '–∑–≤–æ–Ω–æ–∫', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'], weight: 0.3 },
        { words: ['–∫—É–ø–∏—Ç—å', '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–∑–∞–∫–∞–∑–∞—Ç—å'], weight: 0.4 }
      ],
      en: [
        { words: ['do', 'make', 'write', 'prepare'], weight: 0.5 },
        { words: ['study', 'read', 'watch', 'check', 'review'], weight: 0.4 },
        { words: ['meeting', 'call', 'discussion', 'planning'], weight: 0.3 },
        { words: ['buy', 'purchase', 'order', 'get'], weight: 0.4 }
      ],
      kz: [
        { words: ['–∂–∞—Å–∞—É', '–∂–∞–∑—É', '–¥–∞–π—ã–Ω–¥–∞—É'], weight: 0.5 },
        { words: ['–æ“õ—É', '–∫”©—Ä—É', '—Ç–µ–∫—Å–µ—Ä—É'], weight: 0.4 },
        { words: ['–∫–µ–∑–¥–µ—Å—É', '“õ–æ“£—ã—Ä–∞—É', '—Ç–∞–ª“õ—ã–ª–∞—É'], weight: 0.3 }
      ]
    }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
  private detectLanguage(text: string): 'ru' | 'en' | 'kz' {
    const lowerText = text.toLowerCase().trim();
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    const languageIndicators = {
      // –†—É—Å—Å–∫–∏–π: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
      ru: {
        alphabet: /[–∞-—è—ë]/g,
        commonWords: /\b(–∏|–≤|–Ω–∞|—Å|–¥–ª—è|—á—Ç–æ|–∫–∞–∫|–∏–ª–∏|—ç—Ç–æ|–±—ã–ª|–±—ã–ª–∞|–±—ã—Ç—å|–Ω–µ|–¥–∞|–Ω–æ|—Ç–æ|—É–∂–µ|–µ—â–µ|–≤—Å–µ|–º–Ω–µ|–º–æ–π|–º–æ—è|–µ–≥–æ|–µ—ë)\b/g,
        endings: /(—Ç—å|—Å—è|–µ—Ç|–∏—Ç|—É—Ç|—é—Ç|–∞—Ç—å|–∏—Ç—å|–µ—Ç—å|–Ω–∏–π|–Ω–∞—è|–Ω–æ–µ)$/g
      },
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
      en: {
        alphabet: /[a-z]/g,
        commonWords: /\b(the|and|or|but|with|for|what|how|was|were|be|is|are|a|an|to|of|in|on|at|by)\b/g,
        endings: /(ing|ed|ly|tion|ness|ment|able|ible)$/g
      },
      // –ö–∞–∑–∞—Ö—Å–∫–∏–π: —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞
      kz: {
        alphabet: /[”ô“ì“£”©“±“Ø“ª—ñ]/g,
        commonWords: /\b(–∂”ô–Ω–µ|–Ω–µ–º–µ—Å–µ|–±—ñ—Ä–∞“õ|“Ø—à—ñ–Ω|–Ω–µ|“õ–∞–ª–∞–π|–±–æ–ª–¥—ã|–±–æ–ª—É|—Å–æ–ª|–±“±–ª|–æ–ª|–º–µ–Ω|—Å–µ–Ω|–±—ñ–∑)\b/g,
        endings: /(“ì–∞–Ω|–≥–µ–Ω|“õ–∞–Ω|–∫–µ–Ω|—Ç—ã–Ω|—Ç—ñ–Ω|–¥—ã“£|–¥—ñ“£|–ª–∞—Ä|–ª–µ—Ä|–¥–∞—Ä|–¥–µ—Ä)$/g
      }
    };

    let scores = { ru: 0, en: 0, kz: 0 };
    
    // –ü–æ–¥—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    Object.keys(languageIndicators).forEach(lang => {
      const indicators = languageIndicators[lang as keyof typeof languageIndicators];
      
      // –°—á–µ—Ç—á–∏–∫ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (50% –≤–µ—Å–∞)
      const alphabetMatches = lowerText.match(indicators.alphabet);
      scores[lang as keyof typeof scores] += (alphabetMatches?.length || 0) * 0.5;
      
      // –°—á–µ—Ç—á–∏–∫ –ø–æ –æ–±—â–∏–º —Å–ª–æ–≤–∞–º (40% –≤–µ—Å–∞)
      const wordMatches = lowerText.match(indicators.commonWords);
      scores[lang as keyof typeof scores] += (wordMatches?.length || 0) * 4;
      
      // –°—á–µ—Ç—á–∏–∫ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º (10% –≤–µ—Å–∞)
      const endingMatches = lowerText.match(indicators.endings);
      scores[lang as keyof typeof scores] += (endingMatches?.length || 0) * 1;
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
    if (lowerText.length < 10) {
      // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      if (/[–∞-—è—ë]/.test(lowerText) && !/[”ô“ì“£”©“±“Ø“ª—ñ]/.test(lowerText)) {
        scores.ru += 5;
      } else if (/[”ô“ì“£”©“±“Ø“ª—ñ]/.test(lowerText)) {
        scores.kz += 5;
      } else if (/^[a-z\s]+$/i.test(lowerText)) {
        scores.en += 3;
      }
    }

    const detectedLang = Object.keys(scores).reduce((a, b) => 
      scores[a as keyof typeof scores] > scores[b as keyof typeof scores] ? a : b
    ) as 'ru' | 'en' | 'kz';

    // –ï—Å–ª–∏ –≤—Å–µ —Å–∫–æ—Ä—ã —Ä–∞–≤–Ω—ã 0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if (scores.ru === 0 && scores.en === 0 && scores.kz === 0) {
      console.log(`üåê –Ø–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
      return 'en';
    }

    console.log(`üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: ${detectedLang}, scores:`, scores);
    return detectedLang;
  }

  async initialize() {
    if (this.isInitialized) return;
    
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π TensorFlow Lite –º–æ–¥–µ–ª–∏...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    this.isInitialized = true;
    console.log('‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è TensorFlow Lite –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  }

  async analyzeSentiment(text: string): Promise<SentimentResult> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const language = this.detectLanguage(text);
    const processedResult = this.processWithNeuralNetwork(text, language);
    
    return {
      ...processedResult,
      aiModelUsed: `${this.modelVersion} (${language.toUpperCase()})`
    };
  }

  async analyzeTask(taskText: string): Promise<TaskAnalysis> {
    const sentiment = await this.analyzeSentiment(taskText);
    const language = this.detectLanguage(taskText);
    const category = this.categorizeTask(taskText, language);
    const estimatedDuration = this.estimateTaskDuration(taskText, language);
    const priority = this.calculatePriority(taskText, sentiment, language);

    return {
      sentiment,
      category,
      estimatedDuration,
      priority
    };
  }

  private processWithNeuralNetwork(text: string, language: 'ru' | 'en' | 'kz'): Omit<SentimentResult, 'aiModelUsed'> {
    const lowerText = text.toLowerCase().trim();
    
    let positiveScore = 0;
    let negativeScore = 0;
    let neutralScore = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
    const primaryPatterns = this.multilingualPatterns;
    const primaryWeight = 1.0;

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (primaryPatterns.positive[language]) {
      primaryPatterns.positive[language].forEach(pattern => {
        pattern.words.forEach(word => {
          if (lowerText.includes(word)) {
            positiveScore += pattern.weight * primaryWeight;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ "${word}" (${language}): +${pattern.weight}`);
          }
        });
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (primaryPatterns.negative[language]) {
      primaryPatterns.negative[language].forEach(pattern => {
        pattern.words.forEach(word => {
          if (lowerText.includes(word)) {
            negativeScore += pattern.weight * primaryWeight;
            console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ "${word}" (${language}): +${pattern.weight}`);
          }
        });
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (primaryPatterns.neutral[language]) {
      primaryPatterns.neutral[language].forEach(pattern => {
        pattern.words.forEach(word => {
          if (lowerText.includes(word)) {
            neutralScore += pattern.weight * primaryWeight;
            console.log(`‚û°Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ "${word}" (${language}): +${pattern.weight}`);
          }
        });
      });
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const contextModifiers = this.analyzeContext(lowerText, language);
    positiveScore *= contextModifiers.positive;
    negativeScore *= contextModifiers.negative;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const totalScore = positiveScore + negativeScore + neutralScore;
    let sentiment: 'positive' | 'negative' | 'neutral';
    let confidence: number;
    let suggestion: string;

    if (negativeScore > positiveScore && negativeScore > neutralScore && negativeScore > 0) {
      sentiment = 'negative';
      confidence = Math.min(0.95, 0.65 + (negativeScore / Math.max(totalScore, 1)) * 0.30);
      suggestion = this.getNegativeSuggestion(language);
    } else if (positiveScore > negativeScore && positiveScore > neutralScore && positiveScore > 0) {
      sentiment = 'positive';
      confidence = Math.min(0.95, 0.65 + (positiveScore / Math.max(totalScore, 1)) * 0.30);
      suggestion = this.getPositiveSuggestion(language);
    } else {
      sentiment = 'neutral';
      confidence = Math.min(0.85, 0.5 + (neutralScore / Math.max(totalScore, 1)) * 0.30);
      suggestion = this.getNeutralSuggestion(language);
    }

    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (${language}): positive=${positiveScore.toFixed(2)}, negative=${negativeScore.toFixed(2)}, neutral=${neutralScore.toFixed(2)} -> ${sentiment} (${Math.round(confidence * 100)}%)`);

    return { sentiment, confidence, suggestion };
  }

  private analyzeContext(text: string, language: 'ru' | 'en' | 'kz') {
    const urgencyWords = {
      ru: ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–µ–π—á–∞—Å'],
      en: ['urgent', 'quickly', 'immediately', 'now', 'asap'],
      kz: ['—à“±“ì—ã–ª', '–∂—ã–ª–¥–∞–º', '–¥–µ—Ä–µ—É', '“õ–∞–∑—ñ—Ä']
    };

    const intensityWords = {
      ru: ['–æ—á–µ–Ω—å', '–∫—Ä–∞–π–Ω–µ', '—Å–∏–ª—å–Ω–æ'],
      en: ['very', 'extremely', 'really'],
      kz: ['”©—Ç–µ', '–µ—Ä–µ–∫—à–µ']
    };

    let positiveModifier = 1.0;
    let negativeModifier = 1.0;

    if (urgencyWords[language]?.some(word => text.includes(word))) {
      negativeModifier *= 1.2;
    }

    if (intensityWords[language]?.some(word => text.includes(word))) {
      positiveModifier *= 1.1;
      negativeModifier *= 1.1;
    }

    return { positive: positiveModifier, negative: negativeModifier };
  }

  private categorizeTask(text: string, language: 'ru' | 'en' | 'kz'): string {
    const lowerText = text.toLowerCase();
    
    const categories = {
      '–†–∞–±–æ—Ç–∞': {
        ru: ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–¥–∏–ø–ª–æ–º', '–±–∞–≥'],
        en: ['work', 'project', 'code', 'programming', 'development', 'diploma', 'bug', 'thesis'],
        kz: ['–∂“±–º—ã—Å', '–∂–æ–±–∞', '–∫–æ–¥', '–±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—É']
      },
      '–£—á–µ–±–∞': {
        ru: ['—É—á–µ–±–∞', '–∏–∑—É—á–∏—Ç—å', '—ç–∫–∑–∞–º–µ–Ω', '–ª–µ–∫—Ü–∏—è', '–∫—É—Ä—Å'],
        en: ['study', 'learn', 'exam', 'lecture', 'course', 'education'],
        kz: ['–æ“õ—É', '“Ø–π—Ä–µ–Ω—É', '–µ–º—Ç–∏—Ö–∞–Ω', '–ª–µ–∫—Ü–∏—è']
      },
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': {
        ru: ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø–æ–µ–∑–¥–∫–∞', '–≤–æ–¥–∏—Ç—å'],
        en: ['car', 'vehicle', 'transport', 'drive', 'ride', 'auto'],
        kz: ['–º–∞—à–∏–Ω–∞', '–∫”©–ª—ñ–∫', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç']
      },
      '–î–æ–º': {
        ru: ['–¥–æ–º', '—É–±–æ—Ä–∫–∞', '–ø–æ–∫—É–ø–∫–∏', '–≥–æ—Ç–æ–≤–∫–∞'],
        en: ['home', 'cleaning', 'shopping', 'cooking'],
        kz: ['“Ø–π', '—Ç–∞–∑–∞–ª–∞—É', '—Å–∞—Ç—ã–ø –∞–ª—É']
      },
      '–ó–¥–æ—Ä–æ–≤—å–µ': {
        ru: ['—Å–ø–æ—Ä—Ç', '–≤—Ä–∞—á', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'],
        en: ['sport', 'doctor', 'health', 'workout', 'fitness'],
        kz: ['—Å–ø–æ—Ä—Ç', '–¥”ô—Ä—ñ–≥–µ—Ä', '–¥–µ–Ω—Å–∞—É–ª—ã“õ']
      }
    };

    for (const [categoryName, keywords] of Object.entries(categories)) {
      const langKeywords = keywords[language] || [];
      if (langKeywords.some(keyword => lowerText.includes(keyword))) {
        console.log(`üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (${language})`);
        return categoryName;
      }
    }

    return '–û–±—â–µ–µ';
  }

  private estimateTaskDuration(text: string, language: 'ru' | 'en' | 'kz'): number {
    const lowerText = text.toLowerCase();
    
    // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞—á–∏
    let baseTime = 45; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    const durationKeywords = {
      veryQuick: {
        ru: ['–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '–ø—Ä–æ—á–∏—Ç–∞—Ç—å'],
        en: ['check', 'call', 'send', 'look', 'review', 'read'],
        kz: ['—Ç–µ–∫—Å–µ—Ä—É', '“õ–æ“£—ã—Ä–∞—É', '–∂—ñ–±–µ—Ä—É', '–∫”©—Ä—É']
      },
      quick: {
        ru: ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω–∞–π—Ç–∏', '—Å–∫–∞—á–∞—Ç—å', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'],
        en: ['buy', 'order', 'find', 'download', 'install'],
        kz: ['—Å–∞—Ç—ã–ø –∞–ª—É', '—Ç–∞–ø—Å—ã—Ä—ã—Å', '—Ç–∞–±—É']
      },
      medium: {
        ru: ['–Ω–∞–ø–∏—Å–∞—Ç—å', '—Å–æ–∑–¥–∞—Ç—å', '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å', '–∏–∑—É—á–∏—Ç—å', '—Å–¥–µ–ª–∞—Ç—å', '–±–µ–≥–∞—Ç—å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'],
        en: ['write', 'create', 'prepare', 'study', 'make', 'do', 'run', 'workout', 'exercise'],
        kz: ['–∂–∞–∑—É', '“õ“±—Ä—É', '–¥–∞–π—ã–Ω–¥–∞—É', '–∑–µ—Ä—Ç—Ç–µ—É', '–∂–∞—Å–∞—É', '–∂“Ø–≥—ñ—Ä—É']
      },
      long: {
        ru: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '–¥–∏–ø–ª–æ–º', '–ø—Ä–æ–µ–∫—Ç'],
        en: ['develop', 'research', 'analyze', 'diploma', 'project', 'thesis'],
        kz: ['–¥–∞–º—ã—Ç—É', '–∑–µ—Ä—Ç—Ç–µ—É', '—Ç–∞–ª–¥–∞—É', '–¥–∏–ø–ª–æ–º', '–∂–æ–±–∞']
      },
      veryLong: {
        ru: ['–ø–µ—Ä–µ–µ–∑–¥', '—Ä–µ–º–æ–Ω—Ç', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'],
        en: ['moving', 'renovation', 'construction', 'travel', 'trip'],
        kz: ['–∫”©—à—É', '–∂”©–Ω–¥–µ—É', '“õ“±—Ä—ã–ª—ã—Å', '—Å–∞—è—Ö–∞—Ç']
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç —Å–∞–º—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫ —Å–∞–º—ã–º –¥–ª–∏–Ω–Ω—ã–º)
    if (durationKeywords.veryQuick[language]?.some(keyword => lowerText.includes(keyword))) {
      baseTime = 15;
    } else if (durationKeywords.quick[language]?.some(keyword => lowerText.includes(keyword))) {
      baseTime = 30;
    } else if (durationKeywords.long[language]?.some(keyword => lowerText.includes(keyword))) {
      baseTime = 180;
    } else if (durationKeywords.veryLong[language]?.some(keyword => lowerText.includes(keyword))) {
      baseTime = 300;
    } else if (durationKeywords.medium[language]?.some(keyword => lowerText.includes(keyword))) {
      baseTime = 60;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    let timeModifier = 1.0;

    // –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
    const complexityWords = {
      ru: ['—Å–ª–æ–∂–Ω—ã–π', '—Ç—Ä—É–¥–Ω—ã–π', '–±–æ–ª—å—à–æ–π', '–º–Ω–æ–≥–æ'],
      en: ['complex', 'difficult', 'big', 'large', 'many', 'crush'],
      kz: ['“õ–∏—ã–Ω', '–∞—É—ã—Ä', '“Ø–ª–∫–µ–Ω', '–∫”©–ø']
    };

    const simplicityWords = {
      ru: ['–ø—Ä–æ—Å—Ç–æ–π', '–ª–µ–≥–∫–∏–π', '–±—ã—Å—Ç—Ä—ã–π', '–º–∞–ª–µ–Ω—å–∫–∏–π'],
      en: ['simple', 'easy', 'quick', 'small', 'little'],
      kz: ['“õ–∞—Ä–∞–ø–∞–π—ã–º', '–∂–µ“£—ñ–ª', '–∂—ã–ª–¥–∞–º', '–∫—ñ—à–∫–µ–Ω—Ç–∞–π']
    };

    if (complexityWords[language]?.some(word => lowerText.includes(word))) {
      timeModifier *= 1.5;
    } else if (simplicityWords[language]?.some(word => lowerText.includes(word))) {
      timeModifier *= 0.7;
    }

    // –°—Ä–æ—á–Ω–æ—Å—Ç—å (—Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—á–µ)
    const urgencyWords = {
      ru: ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ'],
      en: ['urgent', 'quickly', 'immediately', 'asap'],
      kz: ['—à“±“ì—ã–ª', '–∂—ã–ª–¥–∞–º', '–¥–µ—Ä–µ—É']
    };

    if (urgencyWords[language]?.some(word => lowerText.includes(word))) {
      timeModifier *= 0.8;
    }

    // –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Å—Ç—Ä–æ–∫–∏
    const hashVariation = this.getStringHash(text) % 21 - 10; // –æ—Ç -10 –¥–æ +10
    const finalTime = Math.round(baseTime * timeModifier + hashVariation);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Ä–µ–º—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    return Math.max(5, Math.min(480, finalTime)); // –û—Ç 5 –º–∏–Ω—É—Ç –¥–æ 8 —á–∞—Å–æ–≤
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–µ—à–∞ —Å—Ç—Ä–æ–∫–∏
  private getStringHash(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash);
  }

  private calculatePriority(text: string, sentiment: SentimentResult, language: 'ru' | 'en' | 'kz'): 'high' | 'medium' | 'low' {
    const lowerText = text.toLowerCase();
    
    const priorityKeywords = {
      high: {
        ru: ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–¥–∏–ø–ª–æ–º'],
        en: ['urgent', 'important', 'critical', 'diploma', 'crush'],
        kz: ['—à“±“ì—ã–ª', '–º–∞“£—ã–∑–¥—ã', '–¥–∏–ø–ª–æ–º']
      },
      low: {
        ru: ['–ø–æ—Ç–æ–º', '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–º–æ–∂–Ω–æ'],
        en: ['later', 'sometime', 'maybe'],
        kz: ['–∫–µ–π—ñ–Ω', '–º“Ø–º–∫—ñ–Ω']
      }
    };

    if (priorityKeywords.high[language]?.some(word => lowerText.includes(word))) {
      return 'high';
    }
    
    if (priorityKeywords.low[language]?.some(word => lowerText.includes(word))) {
      return 'low';
    }

    if (sentiment.sentiment === 'negative' && sentiment.confidence > 0.7) {
      return 'high';
    }

    return 'medium';
  }

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ —á—Ç–æ –∏ –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
  private getPositiveSuggestion(language: 'ru' | 'en' | 'kz'): string {
    const suggestions = {
      ru: [
        'üåü –û—Ç–ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!',
        'üéØ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–ª—å! –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!',
        'üí™ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É!'
      ],
      en: [
        'üåü Great task! You are on the right path to success!',
        'üéØ Wonderful goal! Confident you will handle it!',
        'üí™ Positive attitude will help complete this task quickly!'
      ],
      kz: [
        'üåü –ö–µ—Ä–µ–º–µ—Ç —Ç–∞–ø—Å—ã—Ä–º–∞! –°—ñ–∑ —Ç–∞–±—ã—Å“õ–∞ –¥“±—Ä—ã—Å –∂–æ–ª–¥–∞—Å—ã–∑!',
        'üéØ –¢–∞–º–∞—à–∞ –º–∞“õ—Å–∞—Ç! –°—ñ–∑ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—ñ–∑!',
        'üí™ –û“£ –∫”©“£—ñ–ª-–∫“Ø–π —Ç–∞–ø—Å—ã—Ä–º–∞–Ω—ã –∂—ã–ª–¥–∞–º –æ—Ä—ã–Ω–¥–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–¥—ñ!'
      ]
    };
    
    const langSuggestions = suggestions[language];
    return langSuggestions[Math.floor(Math.random() * langSuggestions.length)];
  }

  private getNegativeSuggestion(language: 'ru' | 'en' | 'kz'): string {
    const suggestions = {
      ru: [
        'ü§ó –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –Ω–æ –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!',
        'üí° –†–∞–∑–±–µ–π—Ç–µ —ç—Ç—É –∑–∞–¥–∞—á—É –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏',
        '‚è∞ –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤—ã–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É'
      ],
      en: [
        'ü§ó Challenging task, but you will definitely handle it!',
        'üí° Break this task into smaller parts',
        '‚è∞ Perhaps allocate more time for this task'
      ],
      kz: [
        'ü§ó “ö–∏—ã–Ω —Ç–∞–ø—Å—ã—Ä–º–∞, –±—ñ—Ä–∞“õ —Å—ñ–∑ –º—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—ñ–∑!',
        'üí° –ë“±–ª —Ç–∞–ø—Å—ã—Ä–º–∞–Ω—ã –∫—ñ—à—ñ—Ä–µ–∫ –±”©–ª—ñ–∫—Ç–µ—Ä–≥–µ –±”©–ª—ñ“£—ñ–∑',
        '‚è∞ –ë“±–ª —Ç–∞–ø—Å—ã—Ä–º–∞“ì–∞ –∫”©–±—ñ—Ä–µ–∫ —É–∞“õ—ã—Ç –±”©–ª–≥–µ–Ω –∂”©–Ω'
      ]
    };
    
    const langSuggestions = suggestions[language];
    return langSuggestions[Math.floor(Math.random() * langSuggestions.length)];
  }

  private getNeutralSuggestion(language: 'ru' | 'en' | 'kz'): string {
    const suggestions = {
      ru: [
        'üìã –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        'üìÖ –î–æ–±–∞–≤—å—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        'üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏'
      ],
      en: [
        'üìã Regular task for systematic execution',
        'üìÖ Add deadline for better planning',
        'üéØ Focus on the result during execution'
      ],
      kz: [
        'üìã –ñ“Ø–π–µ–ª—ñ –æ—Ä—ã–Ω–¥–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω “õ–∞–ª—ã–ø—Ç—ã —Ç–∞–ø—Å—ã—Ä–º–∞',
        'üìÖ –ñ–∞“õ—Å—ã –∂–æ—Å–ø–∞—Ä–ª–∞—É “Ø—à—ñ–Ω –º–µ—Ä–∑—ñ–º “õ–æ—Å—ã“£—ã–∑',
        'üéØ –û—Ä—ã–Ω–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ –Ω”ô—Ç–∏–∂–µ–≥–µ –Ω–∞–∑–∞—Ä –∞—É–¥–∞—Ä—ã“£—ã–∑'
      ]
    };
    
    const langSuggestions = suggestions[language];
    return langSuggestions[Math.floor(Math.random() * langSuggestions.length)];
  }

  async analyzeTaskList(tasks: Array<{id: string, text: string, completed: boolean}>) {
    const results = await Promise.all(
      tasks.map(async task => ({
        ...task,
        analysis: await this.analyzeTask(task.text)
      }))
    );

    const stats = {
      total: results.length,
      positive: results.filter(r => r.analysis.sentiment.sentiment === 'positive').length,
      negative: results.filter(r => r.analysis.sentiment.sentiment === 'negative').length,
      neutral: results.filter(r => r.analysis.sentiment.sentiment === 'neutral').length,
      averageConfidence: results.reduce((sum, r) => sum + r.analysis.sentiment.confidence, 0) / results.length,
      categories: this.getCategoryStats(results),
      averageDuration: Math.round(results.reduce((sum, r) => sum + r.analysis.estimatedDuration, 0) / results.length),
    };

    return { results, stats };
  }

  private getCategoryStats(results: any[]) {
    const categories: {[key: string]: number} = {};
    results.forEach(result => {
      const category = result.analysis.category;
      categories[category] = (categories[category] || 0) + 1;
    });
    return categories;
  }
}

export const tensorflowLiteService = new TensorFlowLiteService();