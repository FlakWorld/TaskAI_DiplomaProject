require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const crypto = require("crypto");
const {OAuth2Client} = require('google-auth-library');
const googleClient = new OAuth2Client('221855869276-a3cm74t08419p5c2mvn2q2o6cm072dkh.apps.googleusercontent.com');

const app = express();
app.use(cors());
app.use(express.json());


const transporter = nodemailer.createTransport({
  host: 'smtp.mail.ru',
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER, 
    pass: process.env.EMAIL_PASS  
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email
transporter.verify((error, success) => {
  if (error) {
    console.log('‚ùå Email configuration error:', error);
  } else {
    console.log('‚úÖ Email server ready');
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("‚úÖ MongoDB connected"))
.catch(err => console.error("‚ùå MongoDB connection error:", err));

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  name: String,
  surname: String,
  email: { 
    type: String, 
    unique: true,
    required: true,
    lowercase: true
  },
  password: {
    type: String,
    required: function() { return this.provider === 'local'; }
  },
  microsoftId: String,
  googleId: String,
  provider: { type: String, enum: ['local', 'microsoft', 'google'], default: 'local' },
  avatarUrl: String,
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
  emailVerified: { type: Boolean, default: false },
  emailVerificationToken: String,
  emailVerificationExpires: Date,
});

UserSchema.index({ email: 1 }, { 
  unique: true, 
  collation: { locale: 'en', strength: 2 } 
});

const TaskSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  date: String,
  time: String,
  status: {
    type: String,
    enum: ["–≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"],
    default: "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
  },
  tags: [{
    type: String,
    trim: true,
    lowercase: true
  }], // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ–≥–æ–≤
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
});

const User = mongoose.model("User", UserSchema);
const Task = mongoose.model("Task", TaskSchema);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const sendVerificationEmail = async (email, token, name) => {
  const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify-email?token=${token}`;
  
  const mailOptions = {
    from: {
      name: 'Task Manager App',
      address: process.env.EMAIL_USER
    },
    to: email,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #8BC34A, #6B6F45); padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 20px;">
          <h1 style="color: white; margin: 0; font-size: 28px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager!</h1>
        </div>
        
        <div style="background: #f9f9f9; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
          <h2 style="color: #6B6F45; margin-top: 0;">–ü—Ä–∏–≤–µ—Ç, ${name}! üëã</h2>
          <p style="color: #666; font-size: 16px; line-height: 1.6;">
            –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å.
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" 
               style="background: linear-gradient(135deg, #8BC34A, #6B6F45); 
                      color: white; 
                      padding: 15px 30px; 
                      text-decoration: none; 
                      border-radius: 8px; 
                      font-weight: bold; 
                      font-size: 16px;
                      display: inline-block;">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email
            </a>
          </div>
          
          <p style="color: #999; font-size: 14px; margin-top: 20px;">
            –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
            <span style="word-break: break-all;">${verificationUrl}</span>
          </p>
        </div>
        
        <div style="background: #fff; padding: 20px; border-radius: 10px; border-left: 4px solid #8BC34A;">
          <h3 style="color: #6B6F45; margin-top: 0;">–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:</h3>
          <ul style="color: #666; line-height: 1.6;">
            <li>ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á</li>
            <li>üì± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</li>
            <li>‚ö° –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</li>
          </ul>
        </div>
        
        <div style="text-align: center; margin-top: 30px; color: #999; font-size: 12px;">
          <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        </div>
      </div>
    `
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ Verification email sent to ${email}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error sending email:', error);
    return false;
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticate = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) return res.status(401).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email (—Ç–æ–ª—å–∫–æ –¥–ª—è local —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    if (user.provider === 'local' && !user.emailVerified) {
      return res.status(401).json({ 
        error: "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", 
        emailNotVerified: true 
      });
    }

    req.user = {
      ...decoded,
      provider: user.provider || 'local'
    };
    
    next();
  } catch (error) {
    res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post("/register", async (req, res) => {
  try {
    const { email, password, name, surname } = req.body;
    if (!email || !password || !name || !surname) {
      return res.status(400).json({ error: "Email, –ø–∞—Ä–æ–ª—å, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    
    const user = new User({ 
      email, 
      password: hashedPassword, 
      name, 
      surname,
      emailVerified: false,
      emailVerificationToken: verificationToken,
      emailVerificationExpires: verificationExpires
    });
    await user.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const emailSent = await sendVerificationEmail(email, verificationToken, name);
    
    if (!emailSent) {
      return res.status(500).json({ 
        error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 
      });
    }

    res.status(201).json({ 
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.",
      emailSent: true 
    });
  } catch (error) {
    console.error("Registration error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
app.get("/verify-email", async (req, res) => {
  try {
    const { token } = req.query;
    
    if (!token) {
      return res.status(400).json({ error: "–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
    }

    const user = await User.findOne({
      emailVerificationToken: token,
      emailVerificationExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ 
        error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" 
      });
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
    user.emailVerified = true;
    user.emailVerificationToken = undefined;
    user.emailVerificationExpires = undefined;
    await user.save();

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authToken = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({ 
      message: "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
      token: authToken,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
        surname: user.surname,
        provider: user.provider
      }
    });
  } catch (error) {
    console.error("Email verification error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email" });
  }
});

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
app.post("/resend-verification", async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    const user = await User.findOne({ email, emailVerified: false });
    
    if (!user) {
      return res.status(400).json({ 
        error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" 
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);
    
    user.emailVerificationToken = verificationToken;
    user.emailVerificationExpires = verificationExpires;
    await user.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const emailSent = await sendVerificationEmail(email, verificationToken, user.name);
    
    if (!emailSent) {
      return res.status(500).json({ 
        error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 
      });
    }

    res.json({ 
      message: "–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ",
      emailSent: true 
    });
  } catch (error) {
    console.error("Resend verification error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏" });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω
app.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email
    if (!user.emailVerified) {
      return res.status(401).json({ 
        error: "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É.",
        emailNotVerified: true
      });
    }

    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user._id,
        email: user.email,
        name: user.name || '',
        surname: user.surname || "",
        avatar: user.avatarUrl || "https://via.placeholder.com/80",
        provider: user.provider
      }
    });
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
app.get("/auth", authenticate, (req, res) => {
  res.json({ message: "Authorized", user: req.user });
});

// Google Auth (OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)
app.post('/auth/google', async (req, res) => {
  const { idToken } = req.body;

  if (!idToken) {
    return res.status(400).json({ error: "ID Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
  }

  try {
    const ticket = await googleClient.verifyIdToken({
      idToken,
      audience: '221855869276-6egb238f5i1ivimtrgme6s9nm9bdtad1.apps.googleusercontent.com',
    });

    const payload = ticket.getPayload();
    const { email, name, sub: googleId } = payload;

    if (!email || !googleId) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }

    let user = await User.findOne({
      $or: [{ email }, { googleId }]
    });

    if (!user) {
      user = new User({
        name,
        email,
        googleId,
        provider: 'google',
        emailVerified: true // Google –∞–∫–∫–∞—É–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
      });
    } else if (!user.googleId) {
      user.googleId = googleId;
      user.provider = 'google';
      user.emailVerified = true;
    }

    await user.save();

    const token = jwt.sign(
      { userId: user._id, email: user.email, provider: user.provider },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({
      token,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
        provider: user.provider,
      }
    });
  } catch (error) {
    console.error('Google auth error:', error);
    res.status(401).json({ error: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google" });
  }
});

// Microsoft Auth (OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã)
app.post('/auth/microsoft', async (req, res) => {
  console.log('Received Microsoft auth request:', req.body);
  const { name, email, microsoftId } = req.body;

  if (!email || !microsoftId) {
    console.log('Invalid data received:', { email, microsoftId });
    return res.status(400).json({ message: 'Invalid data' });
  }

  try {
    console.log('Searching for user with email:', email);
    let user = await User.findOne({ 
      $or: [{ email }, { microsoftId }]
    });

    if (!user) {
      console.log('Creating new Microsoft user');
      user = new User({
        name,
        email,
        microsoftId,
        provider: 'microsoft',
        emailVerified: true // Microsoft –∞–∫–∫–∞—É–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
      });
    } else if (!user.microsoftId) {
      console.log('Updating existing user with Microsoft ID');
      user.microsoftId = microsoftId;
      user.provider = 'microsoft';
      user.emailVerified = true;
    }

    await user.save();
    console.log('User saved successfully:', user._id);

    const token = jwt.sign(
      { userId: user._id, email: user.email, provider: user.provider },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    console.log('Token generated for user:', user._id);
    res.json({ 
      token,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
        provider: user.provider
      }
    });
  } catch (err) {
    console.error('Microsoft Auth Error:', err);
    res.status(500).json({ 
      message: 'Server error',
      error: err.message,
      stack: err.stack 
    });
  }
});

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
app.post("/tasks", authenticate, async (req, res) => {
  try {
    const { title, date, time, status, tags } = req.body;
    const task = new Task({
      title,
      date,
      time,
      status: status || "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
      tags: tags || [], // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
      userId: req.user.userId
    });

    await task.save();
    res.status(201).json(task);
  } catch (error) {
    console.error("Create task error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏" });
  }
});

app.get("/tasks", authenticate, async (req, res) => {
  try {
    const tasks = await Task.find({ userId: req.user.userId });
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á" });
  }
});

app.get("/tasks/:id", authenticate, async (req, res) => {
  try {
    const task = await Task.findOne({ 
      _id: req.params.id,
      userId: req.user.userId 
    });
    
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏" });
  }
});

app.put("/tasks/:id", authenticate, async (req, res) => {
  try {
    const { title, date, time, status, tags } = req.body;
    
    if (!title && !status && !tags) {
      return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
    }

    const updates = {};
    
    if (title) updates.title = title;
    if (date !== undefined) updates.date = date || null;
    if (time !== undefined) updates.time = time || null;
    if (status) {
      if (!["–≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"].includes(status)) {
        return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏" });
      }
      updates.status = status;
    }
    if (tags !== undefined) updates.tags = tags; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤

    const task = await Task.findOneAndUpdate(
      { _id: req.params.id, userId: req.user.userId },
      updates,
      { new: true }
    );

    if (!task) {
      return res.status(404).json({ error: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(task);
  } catch (error) {
    console.error("Update task error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏" });
  }
});

app.delete("/tasks/:id", authenticate, async (req, res) => {
  try {
    const task = await Task.findOneAndDelete({
      _id: req.params.id,
      userId: req.user.userId
    });
    
    if (!task) return res.status(404).json({ error: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    res.json({ message: "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è" });
  }
});

app.put("/user/profile", authenticate, async (req, res) => {
  try {
    const { name, surname, avatarUrl } = req.body;
    const updates = {};

    if (typeof name === "string") updates.name = name.trim();
    if (typeof surname === "string") updates.surname = surname.trim();
    if (typeof avatarUrl === "string" || avatarUrl === null) updates.avatarUrl = avatarUrl;

    const user = await User.findByIdAndUpdate(req.user.userId, updates, { new: true });

    if (!user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({
      message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω",
      user: {
        id: user._id,
        name: user.name,
        surname: user.surname,
        email: user.email,
        avatarUrl: user.avatarUrl,
        provider: user.provider,
      },
    });
  } catch (error) {
    console.error("Update profile error:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
  }
});

app.get("/user/profile", authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({
      id: user._id,
      name: user.name || "",
      surname: user.surname || "",
      email: user.email || "",
      avatarUrl: user.avatarUrl || null,
      provider: user.provider,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});