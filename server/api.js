export const API_URL = "http://10.201.1.19:5000";

// –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –°–¢–ê–¢–£–°–û–í –ó–ê–î–ê–ß (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
const TASK_STATUSES = {
  IN_PROGRESS: "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
  COMPLETED: "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä—É—Å—Å–∫–∏–π
const normalizeStatus = (status) => {
  if (!status) return TASK_STATUSES.IN_PROGRESS;
  
  // –ï—Å–ª–∏ —É–∂–µ —Ä—É—Å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (status === TASK_STATUSES.IN_PROGRESS || status === TASK_STATUSES.COMPLETED) {
    return status;
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ä—É—Å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã
  const statusLower = status.toLowerCase();
  
  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  if (statusLower.includes('completed') || statusLower.includes('done') || statusLower.includes('finished')) {
    return TASK_STATUSES.COMPLETED;
  }
  if (statusLower.includes('progress') || statusLower.includes('pending') || statusLower.includes('active')) {
    return TASK_STATUSES.IN_PROGRESS;
  }
  
  // –ö–∞–∑–∞—Ö—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
  if (statusLower.includes('–∞—è“õ—Ç–∞–ª–¥—ã') || statusLower.includes('–æ—Ä—ã–Ω–¥–∞–ª–¥—ã')) {
    return TASK_STATUSES.COMPLETED;
  }
  if (statusLower.includes('–æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞') || statusLower.includes('–∂“±–º—ã—Å—Ç–∞')) {
    return TASK_STATUSES.IN_PROGRESS;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
  console.warn('üü° Unknown status converted to default:', status, '‚Üí', TASK_STATUSES.IN_PROGRESS);
  return TASK_STATUSES.IN_PROGRESS;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
const makeRequest = async (endpoint, method, body = null, token = null) => {
  const headers = {
    "Content-Type": "application/json",
    ...(token && { "Authorization": token })
  };

  const config = {
    method,
    headers,
    ...(body && { body: JSON.stringify(body) })
  };

  try {
    console.log(`üîÑ API Request: ${method} ${endpoint}`, body ? { body } : '');
    
    const response = await fetch(`${API_URL}${endpoint}`, config);
    
    if (!response.ok) {
      const errorData = await response.text();
      let errorMessage = `HTTP error! status: ${response.status}`;
      
      try {
        const jsonError = JSON.parse(errorData);
        errorMessage = jsonError.error || errorMessage;
        
        console.error('‚ùå API Error:', {
          endpoint,
          method,
          status: response.status,
          error: errorMessage,
          receivedStatus: jsonError.receivedStatus,
          allowedStatuses: jsonError.allowedStatuses
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (jsonError.emailNotVerified) {
          return { 
            error: errorMessage, 
            emailNotVerified: true 
          };
        }
        
        throw new Error(errorMessage);
      } catch (parseError) {
        if (parseError.message !== errorMessage) {
          throw new Error(errorData || errorMessage);
        }
        throw parseError;
      }
    }

    const data = await response.json();
    console.log(`‚úÖ API Success: ${method} ${endpoint}`, data);
    return data;
  } catch (error) {
    console.error(`‚ùå API Request Failed: ${endpoint}:`, error);
    
    if (error.message.includes('Failed to fetch')) {
      throw new Error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
    
    throw error;
  }
};

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const register = async (email, password, name, surname) => {
  return makeRequest("/register", "POST", { email, password, name, surname });
};

export const login = async (email, password) => {
  return makeRequest("/login", "POST", { email, password });
};

export const checkAuth = async (token) => {
  return makeRequest("/auth", "GET", null, token);
};

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
export const verifyEmail = async (token) => {
  return makeRequest(`/verify-email?token=${token}`, "GET");
};

export const resendVerification = async (email) => {
  return makeRequest("/resend-verification", "POST", { email });
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞
export const createTask = async (title, date, time, status, tags, token) => {
  try {
    // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∫ —Ä—É—Å—Å–∫–æ–º—É
    const normalizedStatus = normalizeStatus(status);
    
    console.log('üìù Creating task with normalized status:', {
      title,
      date,
      time,
      originalStatus: status,
      normalizedStatus,
      tags
    });

    const taskData = {
      title: title ? title.trim() : '',
      date: date || null,
      time: time || null,
      status: normalizedStatus, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
      tags: Array.isArray(tags) ? tags : []
    };

    return await makeRequest("/tasks", "POST", taskData, token);
  } catch (error) {
    console.error('‚ùå Create task error:', error);
    throw error;
  }
};

export const getTasks = async (token) => {
  try {
    const data = await makeRequest("/tasks", "GET", null, token);
    const tasks = Array.isArray(data) ? data : [];
    console.log(`üìã Retrieved ${tasks.length} tasks`);
    return tasks;
  } catch (error) {
    console.error('‚ùå Get tasks error:', error);
    throw error;
  }
};

export const getTaskById = async (id, token) => {
  return makeRequest(`/tasks/${id}`, "GET", null, token);
};

export const deleteTask = async (id, token) => {
  try {
    console.log('üóëÔ∏è Deleting task:', id);
    return await makeRequest(`/tasks/${id}`, "DELETE", null, token);
  } catch (error) {
    console.error('‚ùå Delete task error:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
export const updateTaskStatus = async (id, newStatus, token) => {
  try {
    // –í–ê–ñ–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const normalizedStatus = normalizeStatus(newStatus);
    
    console.log('üîÑ Updating task status:', {
      id,
      originalStatus: newStatus,
      normalizedStatus
    });

    return await makeRequest(
      `/tasks/${id}`,
      "PUT",
      { status: normalizedStatus }, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      token
    );
  } catch (error) {
    console.error('‚ùå Update task status error:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞
export const updateTask = async (task, token) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–¥–∞—á–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const updatedTask = { ...task };
    if (updatedTask.status) {
      const originalStatus = updatedTask.status;
      updatedTask.status = normalizeStatus(updatedTask.status);
      
      console.log('üîÑ Updating task with normalized status:', {
        id: task._id,
        originalStatus,
        normalizedStatus: updatedTask.status
      });
    }

    return await makeRequest(
      `/tasks/${task._id}`,
      "PUT",
      updatedTask,
      token
    );
  } catch (error) {
    console.error('‚ùå Update task error:', error);
    throw error;
  }
};

// OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const microsoftAuth = async (name, email, microsoftId) => {
  return makeRequest("/auth/microsoft", "POST", { name, email, microsoftId });
};

export const googleAuth = async (idToken) => {
  return makeRequest("/auth/google", "POST", { idToken });
};

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
export const getRussianStatus = (status) => {
  return normalizeStatus(status);
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞
export const isValidStatus = (status) => {
  const normalized = normalizeStatus(status);
  return Object.values(TASK_STATUSES).includes(normalized);
};

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { TASK_STATUSES };