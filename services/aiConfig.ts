// config/aiConfig.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { SECRETS } from '../services/secret'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ secrets.ts

export interface AIConfigType {
  OPENAI_API_KEY: string;
  MODEL: 'gpt-3.5-turbo' | 'gpt-4' | 'gpt-4o-mini';
  MAX_TOKENS: number;
  TEMPERATURE: number;
  MAX_MESSAGES_HISTORY: number;
  REQUEST_TIMEOUT: number;
  RETRY_ATTEMPTS: number;
  FALLBACK_RESPONSES: {
    ERROR: string;
    NETWORK_ERROR: string;
    API_LIMIT: string;
    INVALID_KEY: string;
  };
}

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_CONFIG: AIConfigType = {
  // API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ secrets.ts
  OPENAI_API_KEY: SECRETS.OPENAI_API_KEY || '',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
  MODEL: 'gpt-3.5-turbo', // –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  MAX_TOKENS: 800,        // –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
  TEMPERATURE: 0.7,       // –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0.0 - 1.0)
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  MAX_MESSAGES_HISTORY: 10,  // –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  REQUEST_TIMEOUT: 30000,     // –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  RETRY_ATTEMPTS: 3,          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  
  // Fallback —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  FALLBACK_RESPONSES: {
    ERROR: '–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòî',
    NETWORK_ERROR: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üì∂',
    API_LIMIT: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç! ‚è∞',
    INVALID_KEY: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É! üîß',
  }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export class AIConfigManager {
  private static instance: AIConfigManager;
  private config: AIConfigType;
  private configLoaded: boolean = false;

  private constructor() {
    this.config = { ...BASE_CONFIG };
  }

  public static getInstance(): AIConfigManager {
    if (!AIConfigManager.instance) {
      AIConfigManager.instance = new AIConfigManager();
    }
    return AIConfigManager.instance;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  async initialize(): Promise<void> {
    if (this.configLoaded) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏–∑ secrets.ts
      if (!SECRETS.OPENAI_API_KEY || SECRETS.OPENAI_API_KEY === 'sk-your-openai-api-key-here') {
        console.warn('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ secrets.ts');
      } else {
        this.config.OPENAI_API_KEY = SECRETS.OPENAI_API_KEY;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π API –∫–ª—é—á –∏–∑ AsyncStorage
      const storedApiKey = await AsyncStorage.getItem('openai_api_key');
      if (storedApiKey && storedApiKey !== 'sk-your-openai-api-key-here') {
        this.config.OPENAI_API_KEY = storedApiKey;
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á –∏–∑ AsyncStorage');
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const storedModel = await AsyncStorage.getItem('ai_model');
      if (storedModel && this.isValidModel(storedModel)) {
        this.config.MODEL = storedModel as AIConfigType['MODEL'];
      }

      const storedTemp = await AsyncStorage.getItem('ai_temperature');
      if (storedTemp) {
        const temp = parseFloat(storedTemp);
        if (!isNaN(temp) && temp >= 0 && temp <= 1) {
          this.config.TEMPERATURE = temp;
        }
      }

      this.configLoaded = true;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–∞–º–æ–≥–æ –∫–ª—é—á–∞)
      console.log('‚úÖ AI Config initialized:', {
        hasApiKey: this.isApiKeyValid(),
        keySource: storedApiKey ? 'AsyncStorage' : 'secrets.ts',
        model: this.config.MODEL,
        temperature: this.config.TEMPERATURE
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.configLoaded = true;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getConfig(): AIConfigType {
    return { ...this.config };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
  getApiKey(): string {
    return this.config.OPENAI_API_KEY;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
  isApiKeyValid(): boolean {
    const key = this.config.OPENAI_API_KEY;
    return Boolean(key && key.startsWith('sk-') && key.length > 20 && key !== 'sk-your-openai-api-key-here');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞
  async setApiKey(apiKey: string): Promise<void> {
    if (!apiKey || !apiKey.startsWith('sk-')) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞');
    }

    this.config.OPENAI_API_KEY = apiKey;
    await AsyncStorage.setItem('openai_api_key', apiKey);
    console.log('üîë API –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ AsyncStorage');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
  async setModel(model: AIConfigType['MODEL']): Promise<void> {
    if (!this.isValidModel(model)) {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å');
    }

    this.config.MODEL = model;
    await AsyncStorage.setItem('ai_model', model);
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  async setTemperature(temperature: number): Promise<void> {
    if (temperature < 0 || temperature > 1) {
      throw new Error('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1');
    }

    this.config.TEMPERATURE = temperature;
    await AsyncStorage.setItem('ai_temperature', temperature.toString());
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ OpenAI
  async validateApiKey(apiKey?: string): Promise<boolean> {
    const keyToValidate = apiKey || this.config.OPENAI_API_KEY;
    
    if (!keyToValidate || !keyToValidate.startsWith('sk-')) {
      return false;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);

    try {
      const response = await fetch('https://api.openai.com/v1/models', {
        headers: {
          'Authorization': `Bearer ${keyToValidate}`,
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      return response.ok;
    } catch (error) {
      clearTimeout(timeoutId);
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö
  async getUsageInfo(): Promise<any> {
    if (!this.isApiKeyValid()) {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á');
    }

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);

    try {
      const response = await fetch('https://api.openai.com/v1/usage', {
        headers: {
          'Authorization': `Bearer ${this.config.OPENAI_API_KEY}`,
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        return await response.json();
      }
    } catch (error) {
      clearTimeout(timeoutId);
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:', error);
    }
    
    return null;
  }

  // –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤–æ–π
  async resetToDefaults(): Promise<void> {
    this.config = { ...BASE_CONFIG };
    
    await AsyncStorage.multiRemove([
      'openai_api_key',
      'ai_model', 
      'ai_temperature'
    ]);
    
    this.configLoaded = false;
    console.log('üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –±–∞–∑–æ–≤–æ–π');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  async exportConfig(): Promise<string> {
    const exportData = {
      model: this.config.MODEL,
      temperature: this.config.TEMPERATURE,
      maxTokens: this.config.MAX_TOKENS,
      // API –∫–ª—é—á –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    };
    
    return JSON.stringify(exportData, null, 2);
  }

  // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  async importConfig(configJson: string): Promise<void> {
    try {
      const importData = JSON.parse(configJson);
      
      if (importData.model && this.isValidModel(importData.model)) {
        await this.setModel(importData.model);
      }
      
      if (typeof importData.temperature === 'number') {
        await this.setTemperature(importData.temperature);
      }
      
      if (typeof importData.maxTokens === 'number' && importData.maxTokens > 0) {
        this.config.MAX_TOKENS = importData.maxTokens;
      }
      
    } catch (error) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private isValidModel(model: string): boolean {
    return ['gpt-3.5-turbo', 'gpt-4', 'gpt-4o-mini'].includes(model);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
  getEstimatedCost(inputTokens: number, outputTokens: number): number {
    const costs = {
      'gpt-3.5-turbo': { input: 0.0015, output: 0.002 }, // –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤
      'gpt-4': { input: 0.03, output: 0.06 },
      'gpt-4o-mini': { input: 0.00015, output: 0.0006 },
    };

    const modelCosts = costs[this.config.MODEL] || costs['gpt-3.5-turbo'];
    
    return (
      (inputTokens / 1000) * modelCosts.input +
      (outputTokens / 1000) * modelCosts.output
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async logUsage(inputTokens: number, outputTokens: number): Promise<void> {
    try {
      const cost = this.getEstimatedCost(inputTokens, outputTokens);
      const usageData = {
        timestamp: new Date().toISOString(),
        model: this.config.MODEL,
        inputTokens,
        outputTokens,
        estimatedCost: cost,
      };

      const existingLogs = await AsyncStorage.getItem('ai_usage_logs');
      const logs = existingLogs ? JSON.parse(existingLogs) : [];
      
      logs.push(usageData);
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
      if (logs.length > 100) {
        logs.splice(0, logs.length - 100);
      }
      
      await AsyncStorage.setItem('ai_usage_logs', JSON.stringify(logs));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async getUsageStats(): Promise<{
    totalRequests: number;
    totalTokens: number;
    estimatedTotalCost: number;
    avgTokensPerRequest: number;
  }> {
    try {
      const logsData = await AsyncStorage.getItem('ai_usage_logs');
      if (!logsData) {
        return {
          totalRequests: 0,
          totalTokens: 0,
          estimatedTotalCost: 0,
          avgTokensPerRequest: 0,
        };
      }

      const logs = JSON.parse(logsData);
      
      const totalRequests = logs.length;
      const totalTokens = logs.reduce((sum: number, log: any) => 
        sum + log.inputTokens + log.outputTokens, 0
      );
      const estimatedTotalCost = logs.reduce((sum: number, log: any) => 
        sum + log.estimatedCost, 0
      );
      const avgTokensPerRequest = totalRequests > 0 ? totalTokens / totalRequests : 0;

      return {
        totalRequests,
        totalTokens,
        estimatedTotalCost,
        avgTokensPerRequest: Math.round(avgTokensPerRequest),
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalRequests: 0,
        totalTokens: 0,
        estimatedTotalCost: 0,
        avgTokensPerRequest: 0,
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const AI_CONFIG = BASE_CONFIG;

// Singleton instance
export const aiConfigManager = AIConfigManager.getInstance();

// –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export const getAIConfig = () => aiConfigManager.getConfig();
export const getApiKey = () => aiConfigManager.getApiKey();
export const isApiKeyValid = () => aiConfigManager.isApiKeyValid();