import AsyncStorage from '@react-native-async-storage/async-storage';

const getPatternKey = async (): Promise<string> => {
  const userData = await AsyncStorage.getItem("user");
  const parsed = userData ? JSON.parse(userData) : null;
  const userId = parsed?.id || "default";
  return `TASK_PATTERNS_${userId}`;
};

type PatternMap = Record<string, Record<string, number>>;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ –¥–Ω—é –∏ —á–∞—Å—É
 */
const getTimeKey = (date: Date): string => {
  const day = date.getDay(); // 0 (–≤—Å) ‚Äì 6 (—Å–±)
  const hour = date.getHours(); // 0‚Äì23
  return `${day}_${hour}`;
};

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 */
export const cleanupDeletedTaskPatterns = async (existingTaskTitles: string[]) => {
  try {
    const key = await getPatternKey();
    const raw = await AsyncStorage.getItem(key);
    if (!raw) return;

    const patterns: PatternMap = JSON.parse(raw);
    let hasChanges = false;

    // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const existingTitlesSet = new Set(existingTaskTitles);

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º
    Object.keys(patterns).forEach(timeKey => {
      const taskPatterns = patterns[timeKey];
      
      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
      Object.keys(taskPatterns).forEach(taskTitle => {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if (!existingTitlesSet.has(taskTitle)) {
          delete taskPatterns[taskTitle];
          hasChanges = true;
          console.log(`üßπ –£–¥–∞–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏: "${taskTitle}"`);
        }
      });

      // –ï—Å–ª–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å–ª–æ—Ç
      if (Object.keys(taskPatterns).length === 0) {
        delete patterns[timeKey];
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (hasChanges) {
      await AsyncStorage.setItem(key, JSON.stringify(patterns));
      console.log('‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—á–∏—â–µ–Ω—ã –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
  }
};

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
export const getPatternStats = async (): Promise<{
  totalPatterns: number;
  uniqueTasks: number;
  timeSlots: number;
}> => {
  try {
    const key = await getPatternKey();
    const raw = await AsyncStorage.getItem(key);
    if (!raw) return { totalPatterns: 0, uniqueTasks: 0, timeSlots: 0 };

    const patterns: PatternMap = JSON.parse(raw);
    const uniqueTasks = new Set<string>();
    let totalPatterns = 0;

    Object.values(patterns).forEach(timeSlot => {
      Object.entries(timeSlot).forEach(([task, count]) => {
        uniqueTasks.add(task);
        totalPatterns += count;
      });
    });

    return {
      totalPatterns,
      uniqueTasks: uniqueTasks.size,
      timeSlots: Object.keys(patterns).length
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
    return { totalPatterns: 0, uniqueTasks: 0, timeSlots: 0 };
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ‚Äî –æ–±—É—á–∞–µ–º—Å—è
 */
export const saveTaskPattern = async (title: string, date: Date = new Date()) => {
  const key = await getPatternKey();
  const raw = await AsyncStorage.getItem(key);
  const patterns: PatternMap = raw ? JSON.parse(raw) : {};

  const timeKey = getTimeKey(date);
  if (!patterns[timeKey]) patterns[timeKey] = {};
  patterns[timeKey][title] = (patterns[timeKey][title] || 0) + 1;

  await AsyncStorage.setItem(key, JSON.stringify(patterns));
  console.log(`üìà –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "${title}" –≤ ${timeKey}`);
};

/**
 * –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
 */
export const rejectTaskPattern = async (title: string, date: Date = new Date()) => {
  const key = await getPatternKey();
  const raw = await AsyncStorage.getItem(key);
  if (!raw) return;

  const patterns: PatternMap = JSON.parse(raw);
  const timeKey = getTimeKey(date);

  if (patterns[timeKey]?.[title]) {
    patterns[timeKey][title] = Math.max(0, patterns[timeKey][title] - 1);
    
    // –ï—Å–ª–∏ –≤–µ—Å —Å—Ç–∞–ª 0, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (patterns[timeKey][title] === 0) {
      delete patterns[timeKey][title];
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "${title}" (–≤–µ—Å = 0)`);
    }
    
    // –ï—Å–ª–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å–ª–æ—Ç
    if (Object.keys(patterns[timeKey]).length === 0) {
      delete patterns[timeKey];
    }
    
    await AsyncStorage.setItem(key, JSON.stringify(patterns));
  }
};

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
export const getSuggestedTask = async (
  date: Date = new Date(),
  existingTaskTitles: string[] = []
): Promise<string | null> => {
  const key = await getPatternKey();
  const raw = await AsyncStorage.getItem(key);
  if (!raw) return null;

  const patterns: PatternMap = JSON.parse(raw);
  const timeKey = getTimeKey(date);
  const map = patterns[timeKey];
  if (!map) return null;

  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
  const existingTitlesSet = new Set(existingTaskTitles);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
  const validPatterns = Object.entries(map).filter(([taskTitle]) => 
    existingTitlesSet.has(taskTitle)
  );

  if (validPatterns.length === 0) return null;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é
  const sorted = validPatterns.sort((a, b) => b[1] - a[1]);
  const suggestedTask = sorted[0]?.[0] || null;
  
  if (suggestedTask) {
    console.log(`ü§ñ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${suggestedTask}" (–≤–µ—Å: ${sorted[0][1]})`);
  }
  
  return suggestedTask;
};

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
export const removeTaskFromPatterns = async (taskTitle: string) => {
  try {
    const key = await getPatternKey();
    const raw = await AsyncStorage.getItem(key);
    if (!raw) return;

    const patterns: PatternMap = JSON.parse(raw);
    let hasChanges = false;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    Object.keys(patterns).forEach(timeKey => {
      if (patterns[timeKey][taskTitle]) {
        delete patterns[timeKey][taskTitle];
        hasChanges = true;
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "${taskTitle}" –∏–∑ ${timeKey}`);
      }

      // –ï—Å–ª–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å–ª–æ—Ç
      if (Object.keys(patterns[timeKey]).length === 0) {
        delete patterns[timeKey];
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (hasChanges) {
      await AsyncStorage.setItem(key, JSON.stringify(patterns));
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${taskTitle}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
  }
};

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export const clearAllPatterns = async () => {
  try {
    const key = await getPatternKey();
    await AsyncStorage.removeItem(key);
    console.log('üßπ –í—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
  }
};